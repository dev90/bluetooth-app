{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["service","undefined","characteristicToken","device","server","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","deviceName","connected","token","error","processing","OnFindToken","bind","assertThisInitialized","onDiscover","OnDisconnect","gatt","disconnect","console","log","setState","navigator","bluetooth","requestDevice","filters","name","optionalServices","addEventListener","event","d","target","_this2","connect","getPrimaryService","getCharacteristic","readValue","value","decoder","TextDecoder","decode","buffer","_context2","t0","acceptAllDevices","then","getPrimaryServices","services","queue","Promise","resolve","forEach","_","getCharacteristics","characteristics","uuid","characteristic","supportedProperties","p","properties","push","toUpperCase","join","getSupportedProperties","catch","status","react_default","a","createElement","className","style","margin","type","onClick","applyStyle","hideShowStyle","React","Component","defaultStyle","show","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0972653c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet service =undefined;\nlet characteristicToken=undefined;\nlet device=undefined;\nlet server=undefined;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      deviceName: undefined,\n      connected:false,\n      token:undefined,\n      error:'',\n      processing:false\n    };\n\n    this.OnFindToken = this.OnFindToken.bind(this);\n    this.onDiscover = this.onDiscover.bind(this);\n    this.OnDisconnect = this.OnDisconnect.bind(this);\n  }\n\n\nasync OnDisconnect(){\n\n  if(!device)\n    return;\n\n    device.gatt.disconnect()\n}\n\nasync OnFindToken(){\n  try {\n    console.log('----------------- starting ------------------')\n\n    this.setState({error:'',processing:true});\n\n    if(!device) {\n      console.log('discovering device...')\n      device = await navigator.bluetooth.requestDevice({\n        filters: [ \n            { name: 'E_TOKEN_15' } \n        ],\n        optionalServices: [ 0xfff0 ]\n      });\n\n      if(device)\n        console.log('found device with name: ' + device.name)\n\n      device.addEventListener('gattserverdisconnected',event => {\n        let d = event.target;\n        this.setState({connected: false });\n\n        console.log('Device ' + d.name + ' is disconnected.');\n\n        service=undefined;\n        characteristicToken=undefined;\n        server=undefined;\n        device=undefined;\n      });\n    }\n\n    if(!device.gatt.connected){\n      console.log('connecting to device ...')\n      server = await device.gatt.connect();\n    }\n    \n    if(device.gatt.connected)\n      console.log('Connection Status: Connected')\n    else\n      console.log('Connection Status: Not-Connected')\n\n    this.setState({connected: device.gatt.connected });\n\n    if(!service) {\n      console.log('getting service ...')\n      if(!device.gatt.connected){\n        console.log('connecting to device ...')\n        server = await device.gatt.connect();\n      }\n      service = await server.getPrimaryService(0xfff0);\n    }\n\n    if(!characteristicToken) {\n      console.log('getting service Characteristic ...')\n      characteristicToken = await service.getCharacteristic(0xfff1);\n\n        // characteristicToken.addEventListener('characteristicvaluechanged', e => {\n        //     try {\n        //         console.log('notified value:')\n        //         console.log(e.target.value)\n        //         let decoder = new TextDecoder('utf-8');\n        //         let token=decoder.decode(e.target.value.buffer);\n        //         console.log(token);\n\n        //         this.setState({\n        //           token: token\n        //         });\n        //       } \n        //       catch (error) {\n        //         alert(\"err:\"+ error);\n        //       }\n        //   });\n    }\n\n    console.log('reading Characteristic value ...')\n    const value = await characteristicToken.readValue();\n    console.log(value)\n\n    const decoder = new TextDecoder('utf-8');\n    const token=decoder.decode(value.buffer);\n\n    console.log('decoded token value')\n    console.log(token);\n    this.setState({token: token,processing:false});\n\n    //await characteristicToken.startNotifications();\n\n    console.log('----------------- end ------------------')\n  } \n  catch (error) {\n    this.setState({error:'Error: '+ error,processing:false});\n    console.log('some error: '+error)\n  }\n}\n\n\n\nonDiscover(){\n    console.log('Requesting any Bluetooth Device...');\n    navigator.bluetooth.requestDevice({\n        acceptAllDevices: true,\n        optionalServices: ['0000fff0-0000-1000-8000-00805f9b34fb']})\n    .then(device => {\n      console.log('Connecting to GATT Server...');\n      return device.gatt.connect();\n    })\n    .then(server => {\n      console.log('Getting Services...');\n      return server.getPrimaryServices();\n    })\n    .then(services => {\n      console.log('Getting Characteristics...');\n      let queue = Promise.resolve();\n      services.forEach(service => {\n        queue = queue.then(_ => service.getCharacteristics().then(characteristics => {\n          console.log('> Service: ' + service.uuid);\n          characteristics.forEach(characteristic => {\n            console.log('>> Characteristic: ' + characteristic.uuid + ' ' +\n                getSupportedProperties(characteristic));\n          });\n        }));\n      });\n      return queue;\n    })\n    .catch(error => {\n      console.log('Error! ' + error);\n    });\n  }\n\n\n\n\nrender(){\n  let status= this.state.connected? 'Connected':'Not Connected'\n\n  return (\n    <div className=\"App\">\n        <div><h1>BlueTooth Device</h1></div>\n        <div>\n          {/* <input style={{margin:10}} type='button' value='Discover Device' onClick={this.onDiscover}></input> */}\n          <input className='button-css' style={{margin:10}} type='button' value='Get Token' onClick={this.OnFindToken}></input>\n          \n        </div>\n        <div>\n          <div className='status-div'><b>Device Status:</b>\n            <span style={{margin:10}} className={applyStyle(this.state.connected)}>{status}</span>\n            <input  className={hideShowStyle('',this.state.connected)} style={{margin:10}} type='button' value='Disconnect' onClick={this.OnDisconnect}></input>\n          </div>\n          <br/>\n          <br/>\n          <div className='wrapper'>\n            <div className={hideShowStyle('loader',this.state.processing)}></div>\n              <h2 className={hideShowStyle('',!this.state.processing)}>\n                <span style={{margin:10}}>  {this.state.token? this.state.token:''}</span>\n              </h2>\n          </div>\n          <br/>\n          <br/>\n          <div className='error'>{this.state.error}</div>\n        </div>\n    </div>\n  );\n}}\n\n\nfunction getSupportedProperties(characteristic) {\n  let supportedProperties = [];\n  for (const p in characteristic.properties) {\n    if (characteristic.properties[p] === true) {\n      supportedProperties.push(p.toUpperCase());\n    }\n  }\n  return '[' + supportedProperties.join(', ') + ']';\n}\n\nconst applyStyle=(connected)=>{\n  return connected? 'connected': 'not-connected'\n}\n\nconst hideShowStyle=(defaultStyle, show)=>{\n  return show? defaultStyle+' show': defaultStyle+' hide'\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}